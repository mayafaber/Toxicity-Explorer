library(toxEval)
library(shiny)
library(shinydashboard)
library(DT)
library(tidyverse)
library(dplyr)
library(data.table)
library(ggplot2)
library(tcpl)
library(shinyBS)

pnec_data <- read.csv("PNEC.csv")
pnec <- pnec_data %>%
  select(2,4:5,7,9,11,13,15)
names(pnec) <- c("Substance", "CAS", "Freshwater (µg/L)", "Marine Water (µg/L)","Freshwater Sediment (µg/kg dw)", 
                 "Marine Sediment (µg/kg dw)", "Freshwater fish (µg/kg ww)", "Marine fish (µg/kg ww)")

targetgroup <- c("Nuclear Receptor",
                 "Cell Cycle",
                 "Undefined",              
                 "GPCR",
                 "Cytokine",
                 "Cell Morphology",
                 "Kinase",
                 "DNA Binding",
                 "CYP",
                 "Cell Adhesion Molecules",
                 "Protease",
                 "Transporter",
                 "Steroid Hormone",
                 "Ion Channel",
                 "Phosphatase",
                 "Zebrafish",
                 "Oxidoreductase",
                 "Hydrolase",
                 "Transferase",
                 "Esterase",
                 "Growth Factor",
                 "Lyase",
                 "Misc Protein",
                 "Protease Inhibitor",
                 "Malformation",
                 "Deiodinase",
                 "Histones",
                 "Methyltransferase")

flagsALL <- c("Borderline active",
              "Only highest conc above baseline, active" ,      
              "Only one conc above baseline, active",
              "Noisy curves, relative to the assay",                                 
              "Hit-call potentially confounded by overfitting",
              "Gain AC50 < lowest conc & loss AC50 < mean conc",
              "Biochemical assay with < 50% efficacy",
              "Less than 50% efficacy",
              "AC50 less than lowest concentration tested",
              "Cell viability assay fit with gnls winning model",
              "NA",
              "None")

Flags <- c("Borderline active*",
              "Only highest conc above baseline, active*" ,      
              "Only one conc above baseline, active",
              "Noisy curves, relative to the assay",                                 
              "Hit-call potentially confounded by overfitting",
              "Gain AC50 < lowest conc & loss AC50 < mean conc*",
              "Biochemical assay with < 50% efficacy*",
              "Less than 50% efficacy",
              "AC50 less than lowest concentration tested*",
              "Cell viability assay fit with gnls winning model",
              "NA")

Description <- c("Assay is active with borderline activity*",
              "Single point hit with activity only at the highest concentration tested*" ,      
              "Single point hit with activity not at the highest concentration tested",
              "Noisy concentration series (root mean square error is greater than the cutoff for the assay endpoint)",                                 
              "Hit-call that would change after small correction to the AIC value",
              "Gain-loss model won, though the gain concnetration at half-maximal activity (AC50) is less than the minimum tested concentration, and the loss AC50 is less than the mean tested concentration*",
              "Concentration series for biochemical assay with efficacy values less than 50%*",
              "Concentration series with efficacy values less than 50%",
              "Actvity concentration at half-maximal activity is less than the lowest concentration tested*",
              "Cell viability assay fit with the gain-loss model",
              "No Associated Flags")

printdf <- data.frame(Flags, Description)



assay_names <- c("Apredica" = "APR",
                 "Attagene" = "ATG",
                 "BioSeek" = "BSK",
                 "NovaScreen" = "NVS",
                 "Odyssey Thera" = "OT",
                 "Toxicity Testing" = "TOX21",
                 "CEETOX" = "CEETOX",
                 "CLD" = "CLD",
                 "TANGUAY" = "TANGUAY",
                 "NHEERL_PADILLA" = "NHEERL_PADILLA",
                 "NCCT" = "NCCT",
                 "ACEA Biosciences" = "ACEA",
                 "NHEERL_HUNTER" = "NHEERL_HUNTER", 
                 "NHEERL_NIS" = "NHEERL_NIS" , 
                 "NHEERL_MED" = "NHEERL_MED", 
                 "UPITT" = "UPITT")


# Define UI for application 
ui <- dashboardPage(skin = "green",
                    dashboardHeader(title="Toxicity Explorer"), 
                    dashboardSidebar(
                      width = 350,
                      sidebarMenu(
                        style = "white-space: normal;",
                        sidebarSearchForm(textId = "searchText", buttonId = "searchButton", 
                                          label = "Enter CAS Number (e.g 100-02-7)", icon = shiny::icon("search")),
                        icon("info-circle"),"CAS number must be separated by hyphens into three parts, the first part will include two to seven digits, the second part will be two digits, and the third part will be a single digit (i.e. xxxxxxx-yy-z).",
                        fileInput("data", "Load Data File(CSV)",multiple = FALSE, 
                                  accept = c("text/csv",
                                             "text/comma-separated-values,text/plain",
                                             ".csv")), 
                        icon("info-circle"), "For CSV upload: list CAS numbers in the first column, column header must be named 'CAS'.",
                        br(),
                        h2("Filters"),
                        menuItem("Intended Target Family", icon = icon("th"), tabName = "groupMenu",
                                 checkboxGroupInput("group", "Intended Target Family",
                                                    targetgroup,
                                                    selected=c("Nuclear Receptor",
                                                               "Cell Cycle",
                                                               "GPCR",
                                                               "Cytokine",
                                                               "Cell Morphology",
                                                               "Kinase",
                                                               "DNA Binding",
                                                               "CYP",
                                                               "Cell Adhesion Molecules",
                                                               "Protease",
                                                               "Transporter",
                                                               "Steroid Hormone",
                                                               "Ion Channel",
                                                               "Phosphatase",
                                                               "Zebrafish",
                                                               "Oxidoreductase",
                                                               "Hydrolase",
                                                               "Transferase",
                                                               "Esterase",
                                                               "Growth Factor",
                                                               "Lyase",
                                                               "Misc Protein",
                                                               "Protease Inhibitor",
                                                               "Malformation",
                                                               "Deiodinase",
                                                               "Histones",
                                                               "Methyltransferase"))),
                        menuItem("Assay Source", icon = icon("th"), tabName = "assay", startExpanded = FALSE,
                                 checkboxGroupInput("assay", "Assays:",
                                                    assay_names,
                                                    selected= c("ACEA", "APR", "ATG", 
                                                                "NVS", "OT",            
                                                                "TOX21", "CEETOX", "CLD", "TANGUAY", "NHEERL_PADILLA", "NCCT",          
                                                                "NHEERL_HUNTER", "NHEERL_NIS", "NHEERL_MED", "UPITT"))),
                        menuItem("Flags", icon = icon("th"), tabName = "flagMenu",
                                 checkboxGroupInput("flags", "Excluded Flags",choices = flagsALL, selected = c("Borderline active",
                                                                                                               "Only highest conc above baseline, active" ,      
                                                                                                               "Gain AC50 < lowest conc & loss AC50 < mean conc",
                                                                                                               "Biochemical assay with < 50% efficacy",
                                                                                                               "AC50 less than lowest concentration tested"))),
                        actionButton("reset", label="Reset Filters"),
                        shiny::actionButton(inputId='source', label="Link to Source Code", 
                                            icon = icon("th"), 
                                            onclick ="window.open('https://github.com/mayafaber/Toxicity-Explorer/blob/main/ACC%20App%20Version%201')")),
                      textOutput("res")
                    ),
                    
                    dashboardBody(
                      tabBox(width = 12, id="mainOut",
                             tabPanel(title = tagList("Background", shiny::icon("question")),
                                      h1("Introduction"),
                                      p("With this app, explore chemical toxicity data from two data sources, the ToxCast database and the NORMAN exotoxicity database (ECOTOX). Both data sources are further described below."),
                                      h2("ToxCast"),
                                      p("Data from the ToxCast database was accessed via the ToxEval R-package (De Cicco et al., 2022). ToxCast is a publically accessible library of high-throughput screening toxicity tests which measure the interaction of individual chemicals with human cells and cell components such as proteins, DNA, receptors, enzymes, etc. For more information visit: "),
                                      a(href="https://www.epa.gov/chemical-research/toxicity-forecasting", "www.epa.gov/chemical-research/toxicity-forecasting"),
                                      br(),
                                      br(),
                                      p("ToxCast data provides point of departure (POD) estimates, or chemical concentrations associated with a defined biological effect. In this application the POD of concern is the Activity Concentration at Cutoff (ACC), which is the concentration at which the dose-response curve meets a defined cutoff within an assay. The cutoff is generally specific to each assay and is calculated as a multiplier of the baseline median absolute deviation (BMAD) (Corsi et al., 2019). The BMAD is calculated over all the response values given by the first two concentrations of every chemical within the assay (Filer et al., 2016). The baseline region is defined as 0±3 BMAD (Figure 1). "),
                                      plotOutput('ACCplot'),
                                      p("Figure 1. Dose-response curve of a chemical generated by the ToxCast pipeline. The ACC is based on the activity cutoff threshold which is a multiplier of the top of the BMAD region. Figure adapted from figure 3 in Filer et al. 2016."),
                                      h2("NORMAN ECOTOX"),
                                      p("Data included in the ECOTOX database are experimental endpoints from toxicity tests, which are used to derive benchmark concentrations that are protective of aquatic organisms, known as Predicted No Effect Concnetrations (PNECs). PNECs are derived from acute and chronic aquatic toxicity experiments. PNECs are the concentration below which no adverse effect is expected to occur. For more information visit: "),              
                                      a(href="https://www.norman-network.com/nds/ecotox/?msclkid=f00802fdcf5b11ecbeb5de4c8dfac6f0", "www.norman-network.com/nds/ecotox/"),
                                      br(),
                                      br(),
                                      h2("References"),
                                      p("Corsi, S. R., DeCicco, L. A., Villeneuve, D. L., Blackwell, B. R., Fay, K. A., Ankley, G. T., & Baldwin, A. K. (2019). Prioritizing chemicals of ecological concern in Great Lakes tributaries using high-throughput screening data and adverse outcome pathways. Science of the Total Environment, 686, 995–1009. https://doi.org/10.1016/j.scitotenv.2019.05.457"),
p("De Cicco, L. A., Corsi, S. R., Blackwell, B. R., Villeneuve, D. L., & Ankley, G. T. (2022). toxEval: Evaluation of measured concentration data using the ToxCast high-throughput screening database or a user-defined set of concentration benchmarks (R Package version 1.2.0). U.S. Geological Survey."),
p("Filer, D. L. (2022). tcpl: ToxCast Data Analysis Pipeline. R package version 2.1.0.
  https://CRAN.R-project.org/package=tcpl"),
p("Filer, D. L., Kothiya, P., Woodrow Setzer, R., Judson, R. S., & Martin, M. T. (2016). Tcpl: The ToxCast pipeline for high-throughput screening data. Bioinformatics, 33(4). https://doi.org/10.1093/bioinformatics/btw680"),
p("NORMAN Network. (2022). NORMAN Ecotoxicology Database. https://www.norman-network.com/nds/ecotox/"),
p("U.S. EPA. (2022). ComTox Chemicals Dashboard. https://comptox.epa.gov/dashboard"),
p("Williams, A. J., Grulke, C. M., Edwards, J., McEachran, A. D., Mansouri, K., Baker, N. C., Patlewicz, G., Shah, I., Wambaugh, J. F., Judson, R. S., & Richard, A. M. (2017). The CompTox Chemistry Dashboard: A community data resource for environmental chemistry. Journal of Cheminformatics, 9(1), 1–27. https://doi.org/10.1186/s13321-017-0247-6")
                             ),
                             tabPanel(title = tagList("ACC Data Table", shiny::icon("bars")),
                                      p("For table to generate, must enter a CAS number in the search box or upload a CSV."),
                                      div(DT::dataTableOutput('CSV'), style = "font-size: 70%; width: 99%; overflow-y: scroll;overflow-x: scroll"),
                                      downloadButton('downloadACCTable', 'Download CSV'),
                             ),
                             tabPanel(title = tagList("ACC Summary Statistics", shiny::icon("bars")),
                                      actionButton("update", label="Update ACC Summary Table"),
                                      p("This table is calculated based on the raw data shown in the 'ACC Data Table'."),
                                      p("Must select 'Update ACC Summary Table' to generate table and to reflect any updates to filter selections"),
                                      div(DT::dataTableOutput('CSV2'), style = "font-size: 90%; width: 100%; overflow-y: scroll;overflow-x: scroll"),
                                      downloadButton('downloadGroupTable2', 'Download CSV'),
                             ),
                             tabPanel(title = tagList("Plot", shiny::icon("bar-chart")),
                                      plotOutput('plot')
                             ),
                             tabPanel(title = tagList("PNEC", shiny::icon("bars")),
                                      div(DT::dataTableOutput('PNEC'), style = "font-size: 70%; width: 99%; overflow-y: scroll;overflow-x: scroll"),
                                      downloadButton('downloadGroupTable4', 'Download CSV'),
                             ),
                             tabPanel(title = tagList("Filters Explained", shiny::icon("cogs")),
                                      p("Data can be filtered using the sidebar checkboxes. Initial filters have been set to match the filters preselected by the toxEval R package. Details regarding filter selections are included in the tabs below."),
                                      p("In addition to the following filters, the toxEval function", code("clean_endpoint_info"),"is applied, which is a function that codes for the removel of specific assays. The targeted assay removed are those related to non-specific endpoints."),
                             br(),
                             tabBox(
                               id = "tabset1", 
                               width = "250px",
                               tabPanel("Intended Target Family", "Each assay endpoint is evaluated and assigned an intended target family. The intended target family is a generalized biological activity used to group targets.", 
                               br(" "),
                               span("The groups that have been removed by default are 'Undefined' and 'Background Measurement' as neither of these are associated with a genetic family or biological process.")),
                               tabPanel("Assay Source", "Each identified assay source is the name of the entity that conducted the assay. By default the assay source 'Bioseek' is excluded due to comparatively low ACC values (Corsi et al. 2019)."),
                               tabPanel("Flags", "Flags are assigned to assay results as part of quality assurance for inclusion in the CompTox database. Flags with an * have been removed in accordance with toxEval.", 
                                        "Flag descriptions were obtained from the tcpl R package (Filer, 2022).", 
                                        br(" "),
                                        tableOutput("table")),
                             )),
                               tabPanel(title = tagList("Definitions"),
                                        h3("Definitions related to ToxCast data:"),
                                        strong("High-throughput Screening Assay (Assay):"), 
                                        "Exposure of living cells or cell components, such as biological macromolecules ( i.e. proteins), to chemicals.",
                                        br(" "),
                                        strong("Active Assay:"),
                                        "In CompTox, active assays are those with dose-response curves that are fit by either the Hill or Gain-Loss model, the top of the curve must exceed the activity cutoff threshold (see figure 1), and at least one concentration of the chemical must exceed the activity curoff threshold.",
                                        br(" "),
                                        strong("Activity Concentration at Cutoff (ACC):"),
                                        "The chemical concentration at which the activity cutoff concentration is reached.",
                                        br(" "),
                                        strong("Activity Concentration at 50% (AC50):"),
                                        "The chemical concentration at 50% of maximum activity.",
                                        br(" "),
                                        strong("Intended Target Family:"),
                                        "Either the genetic family or the biological process investigated by the assay.",
                                        br(" "),
                                        strong("ToxCast:"),
                                        "Database for over 1,800 chemicals of a wide range of sources, including industrial and consumer products, screened in more than 700 high-throughputs assays covering a wide variety of cell responses.",
                                        hr(),
                                        h3("Definitions related to Norman data:"),
                                        strong("Norman Ecotoxicology Database (ECOTOX):"),
                                        "A database for chemical benchmark concentrations (i.e. PNEC) which have been developed either experimentally, from toxicity tests, or through predictive models such as quantitative structure-activity relationships (QSAR).",
                                        br(" "),
                                        strong("Point of Departure (POD):"),
                                        "A chemical concentration associated with a defined effect (i.e. AC50 and ACC).",
                                        br(" "),
                                        strong("Predicted No Effect Concentration (PNEC):"),
                                        "The concentration below which no adverse effect is expected to occur.",
                                        br(" "),
                                        "Definitions were adapted from the following webpages, follow the links below for more information:",
                                        br(" "),
                                        a(href="https://www.epa.gov/chemical-research/toxcast-owners-manual-guidance-exploring-data#:~:text=ToxCast%20is%20a%20multi%2Dyear,other%20biological%20molecules%20to%20chemicals.", "ToxCast Owner's Manual"),
                                        br(" "),
                                        a(href="https://www.epa.gov/sites/default/files/2015-08/documents/toxcast_assay_annotation_data_users_guide_20141021.pdf", "ToxCast Assay Annotation Data Users Guide"),
                                        br(" "),
                                        a(href="http://cran.nexr.com/web/packages/tcpl/vignettes/tcpl_Overview.pdf", "TCPL Package Overview"),
                                        br(" "),
                                        a(href="https://www.norman-network.com/nds/ecotox/", "Norman Ecotoxicology Database")),
                              
                      ),   
                      )
                    )


server <- function(input, output, session) {
  
  
  output$text <- renderText({
    input$txt
  })
  
  data1 <- reactive({
    file <- input$data
    if(is.null(file)){
      dataset <- (input$searchText)
      ACC <- get_ACC(dataset)}
    else{
      file <- input$data
      ext <- tools::file_ext(file$datapath)
      
      req(file)
      validate(need(ext == "csv", "Please upload a csv file"))
      
      csv <- read.csv(file$datapath,
                      fileEncoding = 'UTF-8-BOM')
      csv1 <- as.data.frame(csv)
      ACC <- get_ACC(csv1$CAS)}
    cleaned_ep <- clean_endPoint_info(end_point_info)
    filtered_ep <- filter_groups(cleaned_ep)
    ACC2 <- ACC %>%
      dplyr::filter(endPoint %in% filtered_ep$endPoint)
    end_point_infosubset <- subset(cleaned_ep, select = c("assay_component_endpoint_name", "intended_target_family",
                                                          "assay_source_name"))
    mergeddata<- merge(ACC2, end_point_infosubset, by.x = "endPoint", by.y = "assay_component_endpoint_name")
    ACCData3 <- mergeddata[,c(2,7,3,4,5,6,1,8,9)]
    ACCData3$flags[is.na(ACCData3$flags)] <- "NA"
    ACCData4 <- ACCData3 %>%
      dplyr::filter(intended_target_family %in% input$group) %>%
      dplyr::filter(assay_source_name %in% input$assay) %>%
      filter(!grepl(paste(input$flags, collapse = "|"), flags))
    as.data.frame(ACCData4)

  })
  
  data2 <- eventReactive(input$update, {
    newdf2 <- data1() %>%
      group_by(CAS, chnm) %>%
      summarize(mean_ACC = mean(ACC_value), median = median(ACC_value), 
                min = min(ACC_value), max = max(ACC_value), count = n())
    newdf3 <- data1() %>%
      group_by(CAS,chnm) %>%
      summarise(enframe(quantile(ACC_value, c(0.05)), "quantile", "ACC_value")) %>%
      summarize(mean_ACC = mean(ACC_value)) 
    newdf4 <- merge(x=newdf2, newdf3, by="CAS")
    names(newdf4) <- c("CAS", "Chemical Name", "Average ACC (µg/L)","Median ACC (µg/L)", "Min ACC (µg/L)", "Max ACC (µg/L)", " Assay Count",
                       "5th Percentile of ACC (µg/L)")  
    as.data.frame(newdf4)
  })
  
  data4 <- reactive({
    file <- input$data
    if(is.null(file)){
      pnec %>% 
        filter(grepl(input$searchText, CAS))}
    else{
      file <- input$data
      ext <- tools::file_ext(file$datapath)
      
      req(file)
      validate(need(ext == "csv", "Please upload a csv file"))
      csv <- read.csv(file$datapath,
                      fileEncoding = 'UTF-8-BOM')
      csv1 <- as.data.frame(csv)
      colnames(csv1) <- "CAS"
      pnec2 <- pnec %>%
        filter(grepl(paste(csv1$CAS, collapse = "|"), CAS))}
  })
  
  
  output$res <- renderText({
    req(input$sidebarItemExpanded)
    paste("Expanded menuItem:", input$sidebarItemExpanded)
    
  })
  
  
  output$CSV <- DT::renderDataTable({
    datatable(data1(),
              callback = JS("var tips = ['Row Names', 'Chemical CAS number', 'Chemical name per CompTox',
            'Flags', 'ACC (log µM)', 
            'Molecular Weight', 'ACC (µg/L)', 
            'Assay Name', 'Intended Target Family', 'Assay Source'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}")) %>%
      formatRound(c(4:6), 2)
  })
  
  output$CSV2 <- DT::renderDataTable({
      DT::datatable(data2(),
                    callback = JS("var tips = ['Row Names', 'Chemical CAS number', 'Chemical name per CompTox', 'Average ACC for selected active assays',
            'Median ACC for selected active assays', 'Minimum ACC for selected active assays', 
            'Maximum ACC for selected active assays', 'Number of active assays for selected filters', 
            '5th percentile of ACC for selected filters'],
    header = table.columns().header();
for (var i = 0; i < tips.length; i++) {
  $(header[i]).attr('title', tips[i]);
}")) %>%
        formatRound(columns = c(3:6, 8), digits = 2)
  })
  
  
  output$plot <- renderPlot({
    ggplot(data1(), aes(ACC_value, intended_target_family, fill = intended_target_family))+
      geom_boxplot() +
      labs(title ="Boxplot of ACC Values", x = "ACC Value (µg/L)",
           y = "Intended Target Family") +
      theme(plot.title = element_text(hjust = 0.5))
  })
  
  output$ACCplot <- renderPlot({
    logc <- 1:10
    r1 <- sapply(logc, tcplHillVal, ga = 5, tp = 50, gw = 0.5)
    r2 <- sapply(logc, tcplHillVal, ga = 5, tp = 30, gw = 0.5)
    p1 <- tcplFit(logc = logc, resp = r1, bmad = 10)
    p2 <- tcplFit(logc = logc, resp = r2, bmad = log2(1.5))
    
    ## In the dummy data above, the two plots are on very different scales
    
    plot(r1 ~ logc, pch = 20, cex = 0.01, xlab = "Concentration", ylab = "Response",
         cex.lab = 1, line=0, yaxt = "n", xaxt = "n") 
    tcplAddModel(pars = p1, modl = "hill")
    
    abline(v = 3.55, lwd = 3, lty = "solid", col = "dodgerblue2")
    text(x = 3.56, y = par()$usr[4]*0.9, 
         font = 2, labels = "ACC", cex = 0.8, pos = 2, srt = 90)
    
    
    abline(h = 8, lwd = 3, lty = "dashed", col = "gray30")
    rect(xleft = par()$usr[1],
         xright = par()$usr[2], 
         ybottom = -15, 
         ytop = 5,
         border = NA, 
         col = "yellow",
         density = 15, 
         angle = 45)
    text(x = 8.3, y = 12.2,
         font = 2, labels = "activity cutoff threshold", cex = 1, pos = 1)
    text(x = 8.9, y = 5.5,
         font = 2, labels = "BMAD {", cex = 2.25, pos = 1)
    points(x = c(3.55), y = c(8.1),
           pch = 21, cex = 1, col = "gray30", lwd = 2,
           bg = c("dodgerblue2"))
    
    op<-par(no.readonly=TRUE)
  })
  
  output$table <- renderTable(printdf)
    
    
  output$PNEC <- DT::renderDataTable({
    datatable(data4())  %>% 
      formatRound(c(3:8), 2)
  })
  
  output$downloadACCTable <- downloadHandler(
    filename = "tableACC.csv",
    content = function(file) {
      write.csv(data1(), file = file, row.names = FALSE)
    }
    
  )
  
  output$downloadGroupTable4 <- downloadHandler(
    filename = "tablePNEC.csv",
    content = function(file) {
      write.csv(data4(), file = file, row.names = FALSE)
    }
    
  )
  
  observe({
    input$reset
    updateSelectInput(session, "group", selected=c("Nuclear Receptor",
                                                   "Cell Cycle",
                                                   "GPCR",
                                                   "Cytokine",
                                                   "Cell Morphology",
                                                   "Kinase",
                                                   "DNA Binding",
                                                   "CYP",
                                                   "Cell Adhesion Molecules",
                                                   "Protease",
                                                   "Transporter",
                                                   "Steroid Hormone",
                                                   "Ion Channel",
                                                   "Phosphatase",
                                                   "Zebrafish",
                                                   "Oxidoreductase",
                                                   "Hydrolase",
                                                   "Transferase",
                                                   "Esterase",
                                                   "Growth Factor",
                                                   "Lyase",
                                                   "Misc Protein",
                                                   "Protease Inhibitor",
                                                   "Malformation",
                                                   "Deiodinase",
                                                   "Histones",
                                                   "Methyltransferase"))
    updateSelectInput(session, "assay", selected= c("ACEA", "APR", "ATG", 
                                                    "NVS", "OT",            
                                                    "TOX21", "CEETOX", "CLD", "TANGUAY", "NHEERL_PADILLA", "NCCT",          
                                                    "NHEERL_HUNTER", "NHEERL_NIS", "NHEERL_MED", "UPITT"))
    updateSelectInput(session, "flags", selected = c("Borderline active",
                                                     "Only highest conc above baseline, active" ,      
                                                     "Gain AC50 < lowest conc & loss AC50 < mean conc",
                                                     "Biochemical assay with < 50% efficacy",
                                                     "AC50 less than lowest concentration tested"))
    #updateActionButton(session, "submit", selected=FALSE)
  })
    
    
  output$downloadGroupTable2 <- downloadHandler(
    filename = "tableSum.csv",
    content = function(file) {
      if (nrow(data1()) > 4 ){
        write.csv(data2(), file = file, row.names = FALSE)}
      else {
        write.csv(data5(), file = file, row.names = FALSE)}
    })
}

shinyApp(ui, server)
